*$FROM Oracle
$EXTERN Oracle-MEMBER, Oracle-Get, Oracle-SetSuf;

$INCLUDE "LibraryEx";
$ENUM Table;
$ENUM ExdTable;

* Несмотря на название ExdTable - расширенная все таки вторая таблица!, из двух
* содержащихся в ExdTable. Первую называю обычной.

/* Создание таблицы
   <- алфавит
   -> структура [ExdTable [Table1] [Table2]]
   Таблицы хранятся так: [T (префиксы) (суффиксы) (пары "префикс-суффикс-принадлежность")]
*/
* пустое слово входит?

$ENTRY ExdTable-Create {
    e.Alphabet (e.Path)
    , <Br 'Path=./'e.Path> :
    , <Map {s.a = (s.a); = ;} e.Alphabet> : e.SS
    , <Map {(e.Prefix)e.P-E = <ComputeRow (e.Prefix) (eps)>; = ;} e.SS> : e.V
    = <Br 'Abt='e.Alphabet>
    [ExdTable
    [Table ((eps)) ((eps)) ((eps' 'eps' '<Oracle-MEMBER>))]
    [Table
        (e.SS)
        ((eps))
        (e.V)]];
}

/* Функция для красивого вывода таблицы
*/

$ENTRY ExdTable-Print {
    [ExdTable t.T1 t.T2]
    = <Table-Print t.T1><Prout><Table-Print t.T2>;
}

$ENTRY Table-Print {
    [Table (e.S) (e.E) (e.V)]
    , <Prout '\t' <Map {(e.I) = e.I'\t'} e.E>> :
    , <PrintLoop (<Sort e.S>) (e.E) e.V> :
    = ;
}

PrintLoop {
    () (e.E) e.V = ;
    ((e.S) e.S-E) (e.E) e.V
    , <GetRow (e.S) (e.E) e.V ('\t')> : e.Row
    = <Prout e.S'\t' e.Row><PrintLoop (e.S-E) (e.E) e.V>;

}

/* GetRow
    <- (префикс), (суффиксы), пары [т.е где искать],
        разделитель [чтобы не писать две версии для
        основной программы и функции вывода]
    -> строка данного префикса

   GetRowEnum - аналогична GetRow, но:
    -> (префикс (строка префикса))
*/

GetRow {
    (e.S) ((e.E) e.E-E) e.V-B (e.S' 'e.E' 'e.V) e.V-E (e.del)
    = e.V e.del <GetRow (e.S) (e.E-E) e.V-B e.V-E (e.del)>;
    (e.S) (e.E) e.V-B (e.S' 'e.E' 'e.V) e.V-E (e.del)
    = e.V;
    (e.S) (e.Else) e.Some =;
}

GetRowEnum {
    (e.S) ((e.E) e.E-E) e.V-B (e.S' 'e.E' 'e.V) e.V-E (e.del)
    =(e.S (e.V e.del <GetRow (e.S) (e.E-E) e.V-B e.V-E (e.del)>));
    (e.S) (e.E) e.V-B (e.S' 'e.E' 'e.V) e.V-E (e.del)
    = (e.S (e.V));
    (e.S) (e.Else) e.Some =;
}

/* Table-Update - функция обновления таблицы 2 при добавлении нового суффикса.
    <- (префиксы таблицы 1). Используется в AddSymb, чтобы исключить ситуации
        дублирование префиксов в таблицах.
    <- [таблица 2].
    <- добавляемый префикс. Если он уже есть в расширенной таблице - выкидываем.
       Получаем все префиксы с добавленной буквой из алфавита. Формируем новые
       строки для них.
    -> обновленная таблица 2.
*/

$ENTRY Table-Update {
    (e.S)
    [Table (e.SS) (e.E) (e.V)] e.CrEx
    , e.SS : {
        e.SS-B (e.CrEx) e.SS-E = e.SS-B e.SS-E;
        e.NoCrEx = e.SS;
    } : e.SS^
    , <AddSymb (Exclude e.S) (e.CrEx) <Cp 'Abt'>> : e.NewP
    , <Map {
        (e.P)e.P-E = <ComputeRow (e.P) e.E>;
        /*empty*/ = ;
      } e.NewP> : e.NewRows
    = [Table (e.SS e.NewP) (e.E) (<DeleteRow (e.CrEx) e.V> e.NewRows)];
}

/* DeleteRow - удаляет пары с заданным префиксом
    <- префикс.
    <- пары.
    -> оставшиеся пары с отличным префиксом.

   AddSymb - добавляет буквы алфавита к префиксу
    <- (исключаемые префиксы). Если получили префикс отсюда -
        не возвращаем его.
    <- (префикс).
    <- алфавит.
    -> префиксы с добавленными буквами.
*/

DeleteRow {
    (e.S) (e.S' 'e.Col) e.V = <DeleteRow (e.S) e.V>;
    (e.S) e.V = e.V;
}

AddSymb {
    (Exclude e.S) (e.Word) /*empty*/ = ;
    (Exclude e.S) (e.Word) s.Char e.Abt
    , e.S : {
        e.S-B (e.Word s.Char) e.S-E = <AddSymb (Exclude e.S) (e.Word) e.Abt>;
        e.SE = (e.Word s.Char) <AddSymb (Exclude e.S) (e.Word) e.Abt>;
    };

}

/* ExdTable-Insert - вставка в 3 режимах:
    1) вызов в связи с нарушением полноты. Высчитывается новая строка,
       добавляется в таблицу, расширенная обновляется.
    2) вызов в связи с нарушением непротиворечивости. Добавляется
       суффикс. В обеих таблицах достраивается новый столбец.
    3) вызов в связи с нахождением контрпримера. Строятся все префиксы
       контрпримера. Каждый добавляется в режиме (1).
    <- [ExdTable].
    <- (режим)
    <- добавляемое слово.
    -> [ExdTable] со вставленным словом.
*/

$ENTRY ExdTable-Insert {
    [ExdTable [Table (e.S-B (e.Prefix) e.S-E) (e.E) (e.V1)] t.T]
    (notclosed) e.Prefix
    = [ExdTable [Table (e.S-B (e.Prefix) e.S-E) (e.E) (e.V1)] t.T];

    [ExdTable [Table (e.S) (e.E) (e.V1)] t.T]
    (notclosed) e.Prefix
    , <ComputeRow (e.Prefix) e.E> : e.NewRow
    , <Table-Update (e.S) t.T e.Prefix> : t.T^
    = [ExdTable [Table (e.S (e.Prefix)) (e.E) (e.V1 e.NewRow)] t.T];

    [ExdTable [Table (e.S) (e.E) (e.V1)] t.T]
    (notclosedforce) (s.Actual) e.Prefix
    , e.S : {
        e.S-B (e.Prefix) e.S-E
        , e.V1 : e.V1-B (e.Prefix' 'eps' 's.M) e.V1-E
        = [ExdTable [Table (e.S) (e.E)
            (e.V1-B(e.Prefix' 'eps' 's.Actual)e.V1-E)] t.T];
        e.SNP
        , <ComputeRow (force s.Actual) (e.Prefix) e.E> : e.NewRow
        , <Table-Update (e.S) t.T e.Prefix> : t.T^
        = [ExdTable [Table (e.SNP (e.Prefix)) (e.E) (e.V1 e.NewRow)] t.T];
    };
*    , <Prout (s.Actual) for e.Prefix> :


    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)] ]
    (notconsist) e.Suf
    , e.E (e.Suf) : e.E^
    , <GetNewColumn (e.S) e.Suf (e.V1 e.V2)> : e.V1^
    , <GetNewColumn (e.SS) e.Suf (e.V1 e.V2)> : e.V2^
    = [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)] ];

    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)] ]
    (counter) (s.Actual) e.W
    , <GetAllPrefixes e.W (1)> : (e.W^)e.Prefs
    , <ExdTable-Insert
         [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)] ]
         (notclosed) e.W> : t.ExdTable
*    , <Prout all prefs e.Prefs of (e.W)> :
    = <InsertAllPrefixes
        t.ExdTable
*        [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
        e.Prefs>;
}

/* GetNewColumn - строит новый столбец. К каждому префиксу приписывает суффикс и добавляет
    во множество пар. Если после приписывания получили какой - то префикс, оракул не
    вызывается, берется посчитанный результат.
    <- (префиксы).
    <- суффикс.
    <- пары.
    -> пары с добавленным суффиксом.

   FindInTable - ищет данное слово в парах.
    <- (префикс).
    <- пары.
    -> True принадлежность | False.

   InsertAllPrefixes - вызывает вставку для каждого префикса из данного набора.
    <- [ExdTable].
    <- префиксы.
    -> [ExdTable] после всех вставок.

   GetAllPrefixes - находит все префиксы слова.
    <- слово.
    -> оно же и все его префиксы.

   ComputeRow - вычисляет строку для префикса.
    <- (префикс).
    <- суффиксы.
    -> вычисленная строка.
*/

GetNewColumn {
    ((e.S)e.S-E) e.Suf (e.V)
    = <FindInTable (e.S e.Suf) e.V> : {
        True e.M = <GetNewColumn (e.S-E) e.Suf (e.V (e.S' 'e.Suf' 'e.M))>;
        False
        , e.S : {
            eps = <GetNewColumn (e.S-E) e.Suf (e.V (e.S' 'e.Suf' '<Oracle-MEMBER e.Suf>))>;
            e.e = <GetNewColumn (e.S-E) e.Suf (e.V (e.S' 'e.Suf' '<Oracle-MEMBER e.S e.Suf>))>;
        };

    };
    (/*empty*/) e.Suf (e.V)
    = e.V;
}

FindInTable {
    (e.S) e.V-B (e.S' 'e.Suf2' 'e.M) e.V-E
    = True e.M;
    (e.S) e.V
    = False;
}


InsertAllPrefixes {
    t.ExdTable (e.Pref) e.Prefixes
    , <ExdTable-Insert t.ExdTable (notclosed) e.Pref> : t.ExdTable^
    = <InsertAllPrefixes t.ExdTable e.Prefixes>;
    t.ExdTable /*empty*/
    = t.ExdTable;
}

GetAllPrefixes {
    s.a (1) = (s.a);
    s.a (0) = ; /*уже включен предыдущем вызовом*/
    e.W s.a (1) = (e.W s.a) <GetAllPrefixes e.W s.a (0)>;
    e.W s.a (0) = (e.W) <GetAllPrefixes e.W (0)>;
}

ComputeRow {
     (force s.Actual) (e.Prefix) (eps) e.E
    = (e.Prefix' 'eps' 's.Actual)<ComputeRow (e.Prefix) e.E>;
    (e.Prefix) /*empty*/ = ;
    (eps) (e.Suffix) e.E
    = (eps' 'e.Suffix<Oracle-MEMBER e.Suffix>)<ComputeRow (eps) e.E>;
    (e.Prefix) (eps) e.E
    = (e.Prefix' 'eps' '<Oracle-MEMBER e.Prefix>)<ComputeRow (e.Prefix) e.E>;
    (e.Prefix) (e.Suffix) e.E
    = (e.Prefix' 'e.Suffix' '<Oracle-MEMBER e.Prefix e.Suffix>)<ComputeRow (e.Prefix) e.E>;



}

/* ExdTable-IsClosed - проверяет свойство полноты (см слайды).
    <- [ExdTable].
    -> True [ExdTable] | False [ExdTable] после добавления префикса.

   CompareRows - сравнивает строки обычной и расширенной таблицы.
    <- (строки обычной таблицы).
    <- (строки расширенной).
    -> True | False различающийся префикс.

   GetRows - формирует строку из уже посчитанных пар.
    <- (префиксы).
    <- (суффиксы).
    <- пары.
    -> все строки данной таблицы.

   GetRowsEnum - аналогично GetRows, но дополнительно
    возвращает префикс строки.
    <- (префиксы).
    <- (суффиксы).
    <- пары.
    -> все (префикс (строка)) из данной таблицы.
*/

$ENTRY ExdTable-IsClosed {
    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
    , <GetAllRowsEnum (e.S) (e.E) e.V1 ()> : e.Rows1
    , <GetAllRowsEnum (e.SS) (e.E) e.V2 ()> : e.Rows2
    , <CompareRows (e.Rows1) e.Rows2> : {
        True = True [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]];
        e.Pref = False <ExdTable-Insert [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
        (notclosed) e.Pref>;
    };
}

CompareRows {
    (e.Rows1-B (e.S (e.Row)) e.Rows1-E) e.Rows2-B (e.SS (e.Row)) e.Rows2-E
    = <CompareRows (e.Rows1-B (e.S (e.Row)) e.Rows1-E) e.Rows2-B e.Rows2-E>;
    (e.Rows) /*empty*/ = True;
    (e.Rows) (e.S (e.Row))e.Else = e.S;
    e.Else = <Prout error e.Else> <Exit 0>;
}

GetAllRows {
    ((e.S) e.S-E) (e.E) e.V
    = (<GetRow (e.S) (e.E) e.V ()>)<GetAllRows (e.S-E) (e.E) e.V>;
    (/*empty*/) (e.E) e.V
    = ;
    (e.S) (e.E) e.V
    = (<GetRow (e.S) (e.E) e.V ()>);
}

GetAllRowsEnum {
    ((e.S) e.S-E) (e.E) e.V
    = (e.S (<GetRow (e.S) (e.E) e.V ()>))<GetAllRowsEnum (e.S-E) (e.E) e.V>;
    (/*empty*/) (e.E) e.V
    = ;
    (e.S) (e.E) e.V
    = (e.S (<GetRow (e.S) (e.E) e.V ()>));
}
/* ExdTable-ToDFA - строит ДКА по таблице (см слайды).
    <- [ExdTable];
    -> ДКА.

   DecodeState - На текущий момент состояния - строки таблицы
    (в свою очередь однозначно соответствующие своим префиксам).
    С помощью "словаря" переводит строки в номер состояния.
    <- состояние.
    <- ("словарь").
    -> номер состояния.

   DecodeTrans - аналог DecodeState для переходов.
    <- переход.
    <- ("словарь").
    -> переход с номерами состояний.

   DFANF - выводит ДКА в стандартном формате.
    <- "словарь".
    <- (начальные состояния).
    <- (конечные состояния).
    <- переходы.
    -> запись ДКА.

   GetTransitions - находит все переходы (см слайды).
    <- (состояния).
    <- строки обеих таблиц.
    -> переходы.

   FindNgbrs - находит переходы для конкретного состояния.
    <- (состояние).
    <- алфавит.
    <- (строки).
    -> переходы из данного состояния.

   ExdView2 - 2, потому что ниже будет то же самое, но с другим
    синтаксисом. Добавляет букву к слову и нужно, только чтобы
    обрабатывать случаи конкатенации с eps.
    <- слово.
    <- буква.
    -> конкатенция аргументов.

   SmallestUniq - находит кратчайшие префиксы, различающие строки (см слайды).
    Если найдены два префикса с одинаковыми строками, из результата исключается
    самый длинный.
    <- строки таблицы 1.
    -> состояния ДКА.

   Shorter - сравнивает строки на длину.
    <- (строка 1).
    <- строка 2.
    -> i - iая строка короче, 0 - равная длина.

   GetSDict - считает вышеупомянутый словарь.
    <- состояния.
    <- (начальный индекс).
    -> словарь.

   DivideStates - делит состояния на начальные и финальные (см слайды).
    <- состояния.
    <- (множество начальных состояний).
    <- (множество конечных состояний).
    -> (начальные состояния)конечные состояния.
*/

$ENTRY ExdTable-DFASize {
    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
    , <GetAllRowsEnum (e.S) (e.E) e.V1> : e.T1Rows
    , <SmallestUniq e.T1Rows> : e.States
    , <GetSDict e.States (0)> : e.St (e.S1 (e.Row)(e.Max))
    = <Inc e.Max> (e.T1Rows) (e.States) e.St (e.S1 (e.Row)(e.Max));
}

$ENTRY ExdTable-ToDFA {
    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
    , <GetAllRowsEnum (e.S) (e.E) e.V1> : e.T1Rows
    , <GetAllRowsEnum (e.SS) (e.E) e.V2> : e.T2Rows
*    , <Prout all rows' 'e.T1Rows' '(e.T2Rows)> :
    , <SmallestUniq e.T1Rows> : e.States
*    , <Prout uniq rows' 'e.States> :
    , <GetSDict e.States (0)> : e.StatesEnum
    , <DivideStates e.States> : e.F
    , <GetTransitions (e.States) e.T1Rows e.T2Rows> : e.Trans
*    , <Prout Finals' 'e.F'\n'All' 'e.StatesEnum'\n'Transitions' 'e.Trans> :

    , <DFANF (e.StatesEnum) (e.F) e.Trans> : e.DFA
    = e.DFA;

    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
    (e.T1Rows) (e.States) e.StatesEnum
    , <GetAllRowsEnum (e.SS) (e.E) e.V2> : e.T2Rows
    , <DivideStates e.States> : e.F
    , <GetTransitions (e.States) e.T1Rows e.T2Rows> : e.Trans
    , <DFANF (e.StatesEnum) (e.F) e.Trans> : e.DFA
    = e.DFA;
}

DecodeState {
    e.S (e.D-B (e.S (e.Row)(e.N)) e.D-E)
    = <Symb e.N>;
}

DecodeTrans {
    (e.q0)s.t(e.q1) (e.D)
    , e.D : e.D-B (e.S (e.q0)(e.N0)) e.D-E
    , e.D : e.D-B^ (e.S^ (e.q1)(e.N1)) e.D-E^
    = <Symb e.N0>':'s.t'>'<Symb e.N1>;
}

DFANF {
    (e.States (e.S (e.Row)(e.Max))) (e.F) e.Trans
    = '#states\n'<Symb <Inc e.Max>>
      '\n#initial\n'<Symb 0>
      '\n#accepting\n'<Map {
        (e.State) = <DecodeState e.State (e.States (e.S (e.Row)(e.Max)))>'\n'
      } e.F>
      '#alphabet\n'<Map {s.c = s.c'\n'} <Cp 'Abt'>>
      '#transitions'<Map {
        (e.T) = '\n'<DecodeTrans e.T (e.States (e.S (e.Row)(e.Max)))>
      } e.Trans>
}

GetTransitions {
    (/*empty*/) e.Rows = ;
    ((e.S) e.S-E) e.Rows
    = <FindNgbrs (e.S) <Cp 'Abt'> (e.Rows)>
      <GetTransitions (e.S-E) e.Rows>;
}

FindNgbrs {
    (e.S (e.Row)) e.Abt s.C (e.Rows)
    , <ExdView2 e.S s.C> : e.SS
    , e.Rows : {
        e.Rows-B (e.SS (e.Row2)) e.Rows-E = ((e.Row) s.C (e.Row2)) <FindNgbrs (e.S (e.Row)) e.Abt (e.Rows-B e.Rows-E)>; /* ДКА => других переходов нет */
        e.RowsE = <Prout (e.SS (e.Row)) not in e.RowsE> <FindNgbrs (e.S (e.Row)) e.Abt (e.RowsE)>;
    };
    (e.S) /*empty*/ (e.Rows) = ;
}

ExdView2 {
    eps s.C = s.C;
    e.W s.C = e.W s.C;
}

SmallestUniq {
    e.R1-B (e.S1 (e.Row1)) e.R1-E e.R2-B (e.S2 (e.Row1)) e.R2-E
*    , <Prout found' '(e.S2 (e.Row1))' 'like' '(e.S1 (e.Row1))> :
    , <Shorter (e.S1) e.S2> : {
        2 = <SmallestUniq e.R1-B e.R1-E e.R2-B (e.S2 (e.Row1)) e.R2-E>;
        e.NoMatter = <SmallestUniq e.R1-B (e.S1 (e.Row1)) e.R1-E e.R2-B e.R2-E>;
    };
    e.Rows = e.Rows;
}

Shorter {
    (e.S1 s.a1) e.S2 s.a2
    = <Shorter (e.S1) e.S2>;
    (/*empty*/) /*empty*/ = 0;
    (/*empty*/) e.S2 = 1;
    (e.S1) /*empty*/ = 2;
}

GetSDict {
    (e.S (e.R))e.S-E (e.N)
     = (e.S (e.R)(e.N)) <GetSDict e.S-E (<Inc e.N>)>;
    /*empty*/ (e.N) = ;
}

DivideStates {
    /* здесь 1 стоит заменить на '1' наверно*/
    (e.S (1 e.Rest)) e.S-E = (e.S) <DivideStates e.S-E>;
    (e.S (0 e.Rest)) e.S-E = <DivideStates e.S-E>;
    /*empty*/  = ;
}

/* ExdTable-IsConsist - проверяет условие непротиворечивости (см слайды). Реализована
    через три функции - по факту просто реализация тройного цикла.
        for s, row in rows:
         for ss, next(row) in rows:
          if row == next(row):
           for y in alphabet:
            if row(s+y) != row(ss+y):
             return s, ss.
    <- [ExdTable].
    -> True [ExdTable] | False [ExdTable] после вставки суффикса.

   Common - ищет общий суффикс в словах: вида [слово1] буква1 суффикс1, [слово2] буква1 суффикс1.
    <- (слово1).
    <- слово2.
    -> общий суффикс.

   OutLoopC - внешний for цикл.
    <- (строки).
    <- (суффиксы).
    <- пары.
    -> True | расходящиеся строки.

   InLoopC - внутренний for цикл.
    <- (строки).
    <- (суффиксы).
    <- пары.
    -> True.

   AbtLoopC - цикл по буквам алфавита.
    <- (строки).
    <- (пары).
    <- (суффиксы).
    <- алфавит.
    -> True | расходящиеся строки.

   ExdView - см ExdView2.
    <- строка с префиксом.
    -> префикс с добавленной буквой.
*/

$ENTRY ExdTable-IsConsist {
    [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
    , <GetAllRowsEnum (e.S) (e.E) e.V1> <GetAllRowsEnum (e.SS) (e.E) e.V2>: e.Rows
    , <OutLoopC e.Rows (e.E) (e.V1 e.V2)> : {
        True = True [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]];
        (e.S1 (e.Row1))(e.S2 (e.Row2))(e.Rowi)(e.Rowj)
*        , <Prout not consist' '(e.S1 (e.Row1))(e.S2 (e.Row2))' '(e.Rowi)(e.Rowj)> :
        , <Common (e.S1) e.S2> : e.Common
        , <FindBreakingSuf (e.E) (e.Row1) e.Row2> : e.Suf
        = False
          <ExdTable-Insert
          [ExdTable [Table (e.S) (e.E) (e.V1)] [Table (e.SS) (e.E) (e.V2)]]
          (notconsist) e.Common e.Suf>;
    };
}

FindBreakingSuf {
    (/*empty*/) (/*empty*/) /*empty*/ = ;
    ((e.E-B)e.E-E) (s.M1 e.M1-E) s.M1 e.M2-E
    = <FindBreakingSuf (e.E-E) (e.M1-E) e.M2-E>;
    ((eps)e.E-E) (s.M1 e.M1-E) s.M2 e.M2-E
    = ;
    ((e.E-B)e.E-E) (s.M1 e.M1-E) s.M2 e.M2-E
    = e.E-B;
}

Common {
    (e.P1 s.a e.Common) e.P2 s.a e.Common = s.a e.Common;
}

OutLoopC {
    (e.Row1) (e.Row2) e.Rows (e.E) (e.V2)
    , <InLoopC (e.Row1) (e.Row2) e.Rows (e.E) (e.V2)> : {
        True = <OutLoopC (e.Row2) e.Rows (e.E) (e.V2)>;
        e.Else = e.Else;
    };
    (e.Row) /*empty*/ (e.E) (e.V2) = True;
}

InLoopC {
    (e.Row1) /*empty*/ (e.E) (e.V2)
    = True;
    (e.S1 (e.Row1)) (e.S2 (e.Row1)) e.Rows (e.E) (e.V2)
    = <AbtLoopC (e.S1 (e.Row1)) (e.S2 (e.Row1)) (e.Rows) <Cp 'Abt'> (e.E) (e.V2)>;
    (e.S1 (e.Row1)) (e.S2 (e.Row2)) e.Rows (e.E) (e.V2)
    = <InLoopC (e.S1 (e.Row1)) e.Rows (e.E) (e.V2)>;
}

AbtLoopC {
    (e.Row1) (e.Row2) (e.Rows) s.s e.Abt (e.E) (e.V2)
    , <ExdView e.Row1 s.s> : e.S12
    , <ExdView e.Row2 s.s> : e.S22
    , <GetRowEnum (e.S12) (e.E) e.V2 ()> : {
        /*empty*/ = True;
        (e.SS1 (e.Row1E))
        , <GetRowEnum (e.S22) (e.E) e.V2 ()> : {
            (e.SS2 (e.Row1E)) = <AbtLoopC (e.Row1) (e.Row2) (e.Rows) e.Abt (e.E) (e.V2)>;
            (e.SS2 (e.Else)) = (e.SS1 (e.Row1E)) (e.SS2 (e.Else)) (e.Row1) (e.Row2);
            /*empty*/ = True;
        };
    };

    (e.Row1) (e.Row2) (e.Rows) (e.E) (e.V2)
    = <InLoopC (e.Row1) e.Rows (e.E) (e.V2)>;
}

ExdView {
    eps (e.Row) s.s = s.s;
    e.S (e.Row) s.s = e.S s.s;
}
